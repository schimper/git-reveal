#+TITLE: Git/Gitlab
#+AUTHOR: 
#+DATE: 25. März 2025
#+OPTIONS:  timestamp:nil toc:nil num:nil reveal_center:t reveal_progress:t reveal_history:t reveal_control:t reveal_width:1600 reveal_height:900
#+REVEAL_ROOT: ./revealjs
#+REVEAL_THEME: white
#+REVEAL_TRANS: zoom

* Warum Versionskontrolle?
  #+ATTR_REVEAL: :frag (fade-in)
  - Habe ich wirklich die neueste Version der Datei?
  - Welche Version läuft in Produktion?
    - Welche Versionen existieren?
  - Wie stelle ich eine frühere Version meiner Datei wieder her?
  - Wie kann ich eine neues Feature ausprobieren *ohne* etwas kaputt zu machen?
  - Wie kann ich herausfinden, warum eine Änderung gemacht wurde?
  - Wie können wir als Team parallel arbeiten, ohne uns gegenseitig
    zu behindern?

* Was ist Git?
  #+ATTR_REVEAL: :frag (fade-in)
  - **Git ist ein verteiltes Versionskontrollsystem (DVCS).**
  - Entwickelt von Linus Torvalds für die Linux-Kernel-Entwicklung.  
  - **Warum Git?**
    #+ATTR_REVEAL: :frag (fade-in)
    - Jeder hat eine vollständige Kopie des Repositories.  
    - Änderungen können offline verfolgt werden.  
    - Effiziente Zusammenarbeit durch Branches und Merges.  
  - **Wie unterscheidet es sich von älteren Systemen (SVN, CVS)?**
    #+ATTR_REVEAL: :frag (fade-in)
    - Kein zentraler Server notwendig.  
    - Schneller und flexibler.  
* GitLab – Eine Plattform für Git-Projekte
  #+ATTR_REVEAL: :frag (fade-in)
  - **Was ist GitLab?**  
    - Eine webbasierte Entwicklungsplattform für Git.
    - Open-Source-Alternative zu GitHub mit vollem CI/CD-Support.
  - **Warum GitLab?**  
    - WUI/GUI für die Arbeit mit Git
    - direktes Editieren von Code via Visual Studio Code im Browser
  - **Wichtige Funktionen in GitLab**  
    - Repositories verwalten, Issues tracken, Code prüfen.  
    - Continuous Integration (CI) für automatisierte Tests.  
    - Continuous Deployment (CD) für nahtlose Releases.  
* DEMO: Grundlagen von Git

* Effiziente Arbeitsweise mit Git
  #+ATTR_REVEAL: :frag (fade-in)
  - **Sinnvolle Commit-Nachrichten**  
    - Kurze, aber aussagekräftige Nachrichten.
  - **Branching-Strategien**  
    - Feature Branches für neue Funktionen.  
    - Hotfix Branches für Fehlerbehebungen.

* Fazit
  #+ATTR_REVEAL: :frag (fade-in)
  - Git ist ein mächtiges Werkzeug für effiziente, genaue und zuverlässige Softwareentwicklung.  
  - Wichtigste Erkenntnisse:  
    - Sinnvolle Commits und Branching-Strategie nutzen.  
    - Tools wie =git blame= und =git bisect= zur Fehleranalyse einsetzen.  
    - Zusammenarbeit durch Pull Requests und Code Reviews verbessern.  
  - **Nächste Schritte:**  
    - Teaminterne Git-Regeln festlegen.  
    - Hands-on Training für spezielle Git-Befehle.  
    - Einführung von CI/CD zur Automatisierung.  
  - **Diskussion und Fragen**  
